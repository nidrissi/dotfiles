emacs.org

* Initialisation
** Unicode
   #+BEGIN_SRC emacs-lisp :tangle yes
     (set-language-environment "UTF-8")
     (prefer-coding-system 'utf-8)
   #+END_SRC
** Custom file
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file)
   #+END_SRC
** Packages
   #+BEGIN_SRC emacs-lisp :tangle yes
     (fset 'yes-or-no-p 'y-or-n-p)
     (require 'use-package)
   #+END_SRC
** Server
   #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
     (cd (getenv "HOME"))
     (server-start)
   #+END_SRC
* Interface
** Thèmes
*** zenburn
    #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package zenburn-theme
       :ensure t
       :config
       (load-theme 'zenburn t))
    #+END_SRC
*** smart-mode-line
    #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
     (use-package smart-mode-line
       :ensure t
       :init
       (use-package smart-mode-line-powerline-theme :ensure t)
       :config
       (setq sml/theme 'powerline)
       (sml/setup))
    #+END_SRC
** openwith
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package openwith
       :ensure t
       :init
       (openwith-mode))
   #+END_SRC
** company
   #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
     (use-package company
       :ensure t
       :diminish company-mode
       :defer t
       :hook (after-init . global-company-mode))
   #+END_SRC
** undo-tree
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package undo-tree
       :ensure t
       :diminish undo-tree-mode
       :defer t
       :hook (after-init . global-undo-tree-mode))
   #+END_SRC
** volatile-highlight
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package volatile-highlights
       :ensure t
       :diminish volatile-highlights-mode
       :init
       (volatile-highlights-mode t)
       (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
       (vhl/install-extension 'undo-tree))
   #+END_SRC
** dired
*** dired-x
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package dired-x
        :commands dired-omit-mode
        :hook (dired-mode . dired-omit-mode))
    #+END_SRC
*** dired font lock
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package diredfl
        :ensure t
        :hook (after-init . diredfl-global-mode))
    #+END_SRC
*** icons
    #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
      (use-package all-the-icons-dired
        :ensure t
        :defer t
        :hook (dired-mode . all-the-icons-dired-mode))
    #+END_SRC
** multiple-cursors
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package multiple-cursors
       :ensure t
       :bind ("C-c c" . mc/mark-all-dwim))
   #+END_SRC
** ace
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ace-window
       :ensure t
       :bind ("C-$" . ace-window))
   #+END_SRC
** ivy
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ivy
       :ensure t
       :diminish ivy-mode
       :init
       (ivy-mode 1)
       (setq counsel-find-file-ignore-regexp (concat (regexp-opt completion-ignored-extensions) "\\'"))
       :bind
       (("C-s" . swiper)
        ("M-x" . counsel-M-x)
        ("M-y" . counsel-yank-pop)
        ("C-x C-f" . counsel-find-file)
        ("C-!" . ivy-switch-buffer)
        ("<f1> f" . counsel-describe-function)
        ("<f1> v" . counsel-describe-variable)
        ("<f1> l" . counsel-find-library)
        ("<f2> i" . counsel-info-lookup-symbol)
        ("<f2> u" . counsel-unicode-char)
        ("C-c g" . counsel-git)
        ("C-c j" . counsel-git-grep)
        ("C-c k" . counsel-ag)
        ("C-c r" . counsel-mark-ring)
        ("C-c C-r" . ivy-resume)))
     (use-package ivy-hydra :ensure t)
   #+END_SRC
*** icons
    #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
      (use-package all-the-icons-ivy
        :ensure t
        :init (all-the-icons-ivy-setup))
    #+END_SRC
*** projectile
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package counsel-projectile
        :ensure t
        :diminish projectile-mode
        ;; https://github.com/dmacvicar/dotfiles/commit/e07170e4378d84bf17415d49c0e820f32de49503
        :preface (setq projectile-keymap-prefix (kbd "C-c p"))
        :init (counsel-projectile-mode))
    #+END_SRC
** smartparens
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package smartparens-config
       :ensure smartparens
       :diminish smartparens-mode
       :init
       (smartparens-global-mode)
       (sp-use-smartparens-bindings))
   #+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package which-key
       :diminish which-key-mode
       :config (which-key-mode))
   #+END_SRC
** Divers
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq ring-bell-function 'ignore)
     (use-package uniquify)
     (use-package diminish :ensure t)
     (use-package hippie-exp :bind ("M-/" . hippie-expand))
     (use-package eshell :bind ("C-c e" . eshell))
     (use-package recentf :config (recentf-mode 1))
     (setq backup-directory-alist `(("." . ,(expand-file-name "saves" user-emacs-directory))))
   #+END_SRC
   Disable stupid stuff...
   #+BEGIN_SRC emacs-lisp :tangle yes
     (global-unset-key (kbd "C-z"))
     (global-unset-key (kbd "<f9>"))
     (global-unset-key (kbd "<insert>"))
     (setq disabled-command-function nil)
   #+END_SRC
* org
  #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
    (use-package org
      :ensure t
      :bind (("C-c a" . org-agenda)
             ("C-c l" . org-store-link)
             ("C-c o" . org-capture)))
  #+END_SRC
* Programmation
** LSP
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package lsp-mode
       :ensure t
       :hook ((python-mode . lsp-deferred)
              (js-mode . lsp-deferred)
              (lsp-mode . lsp-enable-which-key-integration))
       :commands (lsp lsp-deferred))

     (use-package lsp-ui :commands lsp-ui-mode)
     (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
   #+END_SRC
** LaTeX
*** reftex
    Must come before latex.
    #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
      (use-package reftex
        :ensure t
        :defer t
        :config
        (add-to-list 'reftex-bibliography-commands "addbibresource")
        (setq reftex-default-bibliography
              (expand-file-name "bibtex/bib/mainbib.bib" (getenv "TEXMFHOME"))))
    #+END_SRC
*** latex
    #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
      (use-package latex
        :ensure auctex
        :defer t
        :mode ("\\.tex'" . latex-mode)
        :bind (:map LaTeX-mode-map ("C-c C-k" . my/TeX-kill-job))
        :hook
        ((LaTeX-mode . turn-on-reftex)
         (LaTeX-mode . turn-on-flyspell)
         (LaTeX-mode . LaTeX-math-mode)
         (LaTeX-mode . TeX-source-correlate-mode)
         (LaTeX-mode . prettify-symbols-mode))
        :init
        (setq ispell-tex-skip-alists
              (list
               (append
                (car ispell-tex-skip-alists)
                '(("\\\\cref" ispell-tex-arg-end)
                  ("\\\\Cref" ispell-tex-arg-end)
                  ("\\\\import" ispell-tex-arg-end 2)
                  ("\\\\textcite" ispell-tex-arg-end)))
               (cadr ispell-tex-skip-alists)))
        :config
        ;; prettify!
        (with-eval-after-load 'tex
          (dolist
              (elt '(("\\coloneqq" . ?≔) ("\\vartheta" . ?ϑ) ("\\varnothing" . ?∅) ("\\varpi" . ?ϖ) ("\\implies" . ?⟹) ("\\dots" . ?…) ("\\item" . ?*) ("\\og" . ?«) ("\\fg" . ?»)))
            (add-to-list 'tex--prettify-symbols-alist elt))))

      (defun my/TeX-kill-job ()
          "Kill the currently running TeX job but ask for confirmation before."
          (interactive)
          (let ((process (TeX-active-process)))
            (if process
                (if (y-or-n-p "Kill current TeX process?")
                    (kill-process process)
                  (error "Canceled kill."))
              ;; Should test for TeX background process here.
              (error "No TeX process to kill"))))

    #+END_SRC
*** latexmk
    #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
      (use-package auctex-latexmk
        :ensure t
        :after latex
        :commands auctex-latexmk-setup
        :hook (LaTeX-mode . my/make-latexmk-default)
        :init (auctex-latexmk-setup))

      (defun my/make-latexmk-default ()
        "Sets TeX-command-default to LatexMk, to be used in a hook."
        (setq TeX-command-default "LatexMk"))
    #+END_SRC
*** Fonts
    Used for folding.
    #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
      (if (display-graphic-p)
          (dolist (range '((#x2200 . #x23ff) (#x27c0 . #x27ff) (#x2980 . #x2bff) (#x1d400 . #x1d7ff)))
            (set-fontset-font
             "fontset-default"
             (cons (decode-char 'ucs (car range)) (decode-char 'ucs (cdr range)))
             "STIX")))
    #+END_SRC
*** ebib
    #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
      (use-package ebib
        :ensure t
        :bind ("C-c b" . ebib)
        :config
        (setq ebib-bib-search-dirs
              (list (expand-file-name "bibtex/bib" (getenv "TEXMFHOME")))
              ebib-file-search-dirs (list (expand-file-name "papers" my/nextcloud-dir))))
    #+END_SRC
** julia
   #+BEGIN_SRC emacs-lisp :tangle (my/tangle-p)
     (use-package julia-mode
       :ensure t
       :mode "\\.jl\\'")
     (use-package julia-repl
       :ensure t
       :defer t
       :hook (julia-mode . julia-repl-mode))
   #+END_SRC
** Typescript
   #+BEGIN_SRC emacs-lisp :tangle no
     (defun setup-tide-mode ()
       "Setup tide-mode."
       (interactive)
       (tide-setup)
       (flycheck-mode +1)
       (setq flycheck-check-syntax-automatically '(save mode-enabled))
       (eldoc-mode +1)
       (tide-hl-identifier-mode +1))
     (use-package tide
       :ensure t
       :commands tide-setup
       :config
       (setq tide-format-options
             '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t
               :placeOpenBraceOnNewLineForFunctions nil)))
     (use-package typescript-mode
       :ensure t
       :mode "\\.ts'"
       :hook
       ((before-save . tide-format-before-save)
        (typescript-mode . setup-tide-mode)))
   #+END_SRC
** Divers
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package cperl-mode
       :mode "\\.\\([pP][Llm]\\|al\\)\\'"
       :interpreter ("perl" "perl5" "miniperl"))
     (use-package markdown-mode
       :ensure t
       :mode ("\\.markdown?\\'" "\\.md?\\'"))
     ;; (use-package web-mode
     ;;   :ensure t
     ;;   :mode ("\\.\\([tT][tT]\\)\\'" ; template toolkit
     ;;          "\\.phtml\\'" "\\.tpl\\.php\\'" "\\.[agj]sp\\'" "\\.as[cp]x\\'"
     ;;          "\\.erb\\'" "\\.mustache\\'" "\\.djhtml\\'" "\\.html?\\'" "\\.jsx?\\'" "\\.s?css\\'"))
     (use-package sass-mode
       :ensure t
       :mode "\\.scss?\\'")
     (use-package jade-mode
       :ensure t
       :mode "\\.jade\\'")
     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode . rainbow-delimiters-mode))
     ;; (use-package elpy
     ;;   :ensure t
     ;;   :defer t
     ;;   :init
     ;;   (advice-add 'python-mode :before 'elpy-enable))
   #+END_SRC
* Git
** Magit
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package magit
       :ensure t
       :bind ("C-c m" . magit-status)
       :config
       (global-magit-file-mode)
       (setq magit-last-seen-setup-instructions "1.4.0"))
   #+END_SRC
** diff-hl
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package diff-hl
       :ensure t
       :hook ((magit-post-refresh . diff-hl-magit-post-refresh)
              (dired-mode . diff-hl-dired-mode-unless-remote))
       :init
       (global-diff-hl-mode))
   #+END_SRC
** misc
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package gitconfig-mode :ensure t)
     (use-package gitignore-mode :ensure t)
   #+END_SRC
* Divers
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package woman
      :defer t
      :bind ("C-c w" . woman))
  #+END_SRC
