#+TITLE: emacs.org
#+AUTHOR: Najib

* Initialisation
** local.el
   If there is a local file, load it
   #+BEGIN_SRC emacs-lisp
     (let ((local (expand-file-name "local.el" user-emacs-directory)))
       (if (file-exists-p local)
           (load-file local)))
   #+END_SRC
** custom.el
   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file)
   #+END_SRC
** use-package
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
     (require 'use-package)
     (setq use-package-always-ensure t)
   #+END_SRC
** server
   #+BEGIN_SRC emacs-lisp
     (if (window-system)
         (add-hook 'after-init-hook #'server-start))
   #+END_SRC
* Interface
** ligatures
   Combination of [[https://github.com/tonsky/FiraCode/wiki/Emacs-instructions][Fira Code instructions]] and [[https://github.com/microsoft/cascadia-code/issues/153][Cascadia instructions]]
   #+BEGIN_SRC emacs-lisp
     (use-package composite
       :defer t
       :ensure nil
       :init
       (defvar composition-ligature-table (make-char-table nil))
       :hook
       (((prog-mode conf-mode nxml-mode markdown-mode help-mode)
         . (lambda () (setq-local composition-function-table composition-ligature-table))))
       :config
       (when (version<= "27.0" emacs-version)
         (let ((alist
                '((33 . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
                  (35 . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
                  (36 . ".\\(?:\\(>\\)>?\\)")
                  (37 . ".\\(?:\\(%\\)%?\\)")
                  (38 . ".\\(?:\\(&\\)&?\\)")
                  (42 . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
                  ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
                  (43 . ".\\(?:\\([>]\\)>?\\)")
                  ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
                  (45 . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
                  ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
                  (46 . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
                  (47 . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
                  ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
                  (48 . ".\\(?:\\(x[a-fA-F0-9]\\).?\\)")
                  (58 . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
                  (59 . ".\\(?:\\(;\\);?\\)")
                  (60 . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
                  (61 . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
                  (62 . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
                  (63 . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
                  (91 . ".\\(?:\\(|\\)[]|]?\\)")
                  ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
                  (94 . ".\\(?:\\(=\\)=?\\)")
                  (95 . ".\\(?:\\(|_\\|[_]\\)_?\\)")
                  (119 . ".\\(?:\\(ww\\)w?\\)")
                  (123 . ".\\(?:\\(|\\)[|}]?\\)")
                  (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
                  (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
           (dolist (char-regexp alist)
             (set-char-table-range composition-ligature-table (car char-regexp)
                                   `([,(cdr char-regexp) 0 font-shape-gstring]))))
         (set-char-table-parent composition-ligature-table composition-function-table)))
   #+END_SRC
** themes
*** theme
    #+BEGIN_SRC emacs-lisp
      (use-package doom-themes
        :config
        (load-theme 'doom-vibrant t)
        (doom-themes-org-config))
    #+END_SRC
*** smart-mode-line
    #+BEGIN_SRC emacs-lisp
      (use-package smart-mode-line-powerline-theme
        :if window-system)
      (use-package smart-mode-line
        :if window-system
        :hook (after-init . sml/setup))
    #+END_SRC
** openwith
   #+BEGIN_SRC emacs-lisp
     (use-package openwith
       :hook (after-init . openwith-mode))
   #+END_SRC
** company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :if window-system
       :diminish company-mode
       :defer t
       :hook (after-init . global-company-mode))
   #+END_SRC
** undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :diminish undo-tree-mode
       :defer t
       :hook (after-init . global-undo-tree-mode))
   #+END_SRC
** volatile-highlight
   #+BEGIN_SRC emacs-lisp
     (use-package volatile-highlights
       :diminish volatile-highlights-mode
       :init
       (volatile-highlights-mode t)
       (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
       (vhl/install-extension 'undo-tree))
   #+END_SRC
** dired
*** dired-x
    #+BEGIN_SRC emacs-lisp
      (use-package dired-x
        :ensure nil
        :commands dired-omit-mode
        :hook (dired-mode . dired-omit-mode))
    #+END_SRC
*** dired font lock
    #+BEGIN_SRC emacs-lisp
      (use-package diredfl
        :commands diredfl-mode
        :hook (dired-mode . diredfl-mode))
    #+END_SRC
*** dired icons
    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons-dired
        :if window-system
        :defer t
        :diminish all-the-icons-dired-mode
        :hook (dired-mode . all-the-icons-dired-mode))
    #+END_SRC
** multiple-cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :bind ("C-c c" . mc/mark-all-dwim))
   #+END_SRC
** ace
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :bind ("C-$" . ace-window))
   #+END_SRC
** ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :diminish (ivy-mode counsel-mode)
       :hook
       (after-init . ivy-mode)
       :custom
       (counsel-find-file-ignore-regexp (concat (regexp-opt completion-ignored-extensions) "\\'"))
       :bind
       (("C-s" . swiper)
        ("C-!" . ivy-switch-buffer)
        ("<f2> i" . counsel-info-lookup-symbol)
        ("<f2> u" . counsel-unicode-char)
        ("C-c j" . counsel-rg)
        ("C-c C-r" . ivy-resume))
       :config
       (counsel-mode))
     (use-package ivy-hydra)
   #+END_SRC
*** ivy icons
    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons-ivy
        :if window-system
        :hook (after-init . all-the-icons-ivy-setup))
    #+END_SRC
*** projectile
    #+BEGIN_SRC emacs-lisp
      (use-package counsel-projectile
        :diminish projectile-mode
        :custom
        (projectile-globally-ignored-file-suffixes completion-ignored-extensions)
        :bind
        (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
        :hook
        (after-init . counsel-projectile-mode)
        :config
        (add-to-list 'projectile-globally-ignored-directories "node_modules"))
    #+END_SRC
** smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens-config
       :ensure smartparens
       :diminish smartparens-mode
       :hook
       ((after-init . smartparens-global-mode)
        (after-init . sp-use-smartparens-bindings)))
   #+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :if window-system
       :diminish which-key-mode
       :hook (after-init . which-key-mode))
   #+END_SRC
** recentf
   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :ensure nil
       :custom
       (recentf-exclude
        `(,(expand-file-name package-user-dir)
          "/\\(\\(\\(COMMIT\\|NOTES\\|PULLREQ\\|MERGEREQ\\|TAG\\)_EDIT\\|MERGE_\\|\\)MSG\\|\\(BRANCH\\|EDIT\\)_DESCRIPTION\\)\\'"))
       :hook
       (after-init . recentf-mode))
   #+END_SRC
** Divers
   #+BEGIN_SRC emacs-lisp
     (use-package uniquify :ensure nil)
     (use-package diminish)
     (use-package hippie-exp
       :ensure nil
       :bind ("M-/" . hippie-expand))
     (use-package eshell
       :ensure nil
       :bind ("C-c e" . eshell))
     (setq backup-directory-alist `(("." . ,(expand-file-name "saves" user-emacs-directory))))
   #+END_SRC
   Disable stupid stuff...
   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-z"))
     (global-unset-key (kbd "<f9>"))
     (global-unset-key (kbd "<insert>"))
     (setq disabled-command-function nil)
   #+END_SRC
* org
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :if window-system
      :bind (("C-c a" . org-agenda)
             ("C-c l" . org-store-link)
             ("C-c o" . org-capture)))
  #+END_SRC
* Programming
** woman
   #+BEGIN_SRC emacs-lisp
     (use-package woman
       :ensure nil
       :bind ("C-c w" . woman))
   #+END_SRC
** LSP
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :if window-system
       :hook (((python-mode js-mode) . lsp-deferred)
              (lsp-mode . lsp-enable-which-key-integration))
       :commands (lsp lsp-deferred))
     (use-package lsp-ui
       :if window-system
       :commands lsp-ui-mode
       :bind
       (:map lsp-ui-mode-map
             ("M-." . lsp-ui-peek-find-definitions)
             ("M-?" . lsp-ui-peek-find-references)))
     (use-package lsp-ivy
       :if window-system
       :commands lsp-ivy-workspace-symbol)
   #+END_SRC
** LaTeX
*** reftex
    Must come before latex.
    #+BEGIN_SRC emacs-lisp
      (use-package reftex
        :if window-system
        :defer t
        :config
        (add-to-list 'reftex-bibliography-commands "addbibresource")
        (setq reftex-default-bibliography
              (expand-file-name "bibtex/bib/mainbib.bib" (getenv "TEXMFHOME"))))
    #+END_SRC
*** latex
    #+BEGIN_SRC emacs-lisp
      (use-package latex
        :if window-system
        :ensure auctex
        :defer t
        :mode ("\\.tex'" . latex-mode)
        :bind (:map LaTeX-mode-map ("C-c C-k" . my/TeX-kill-job))
        :hook
        ((LaTeX-mode . turn-on-reftex)
         (LaTeX-mode . turn-on-flyspell)
         (LaTeX-mode . LaTeX-math-mode)
         (LaTeX-mode . TeX-source-correlate-mode)
         (LaTeX-mode . prettify-symbols-mode))
        :init
        (setq ispell-tex-skip-alists
              (list
               (append
                (car ispell-tex-skip-alists)
                '(("\\\\cref" ispell-tex-arg-end)
                  ("\\\\Cref" ispell-tex-arg-end)
                  ("\\\\import" ispell-tex-arg-end 2)
                  ("\\\\textcite" ispell-tex-arg-end)))
               (cadr ispell-tex-skip-alists)))
        :config
        ;; prettify!
        (with-eval-after-load 'tex
          (dolist
              (elt '(("\\coloneqq" . ?≔) ("\\vartheta" . ?ϑ) ("\\varnothing" . ?∅) ("\\varpi" . ?ϖ) ("\\implies" . ?⟹) ("\\dots" . ?…) ("\\item" . ?*) ("\\og" . ?«) ("\\fg" . ?»)))
            (add-to-list 'tex--prettify-symbols-alist elt))))

      (defun my/TeX-kill-job ()
          "Kill the currently running TeX job but ask for confirmation before."
          (interactive)
          (let ((process (TeX-active-process)))
            (if process
                (if (y-or-n-p "Kill current TeX process?")
                    (kill-process process)
                  (error "Canceled kill."))
              ;; Should test for TeX background process here.
              (error "No TeX process to kill"))))

    #+END_SRC
*** latexmk
    #+BEGIN_SRC emacs-lisp
      (use-package auctex-latexmk
        :if window-system
        :after latex
        :commands auctex-latexmk-setup
        :hook (LaTeX-mode . my/make-latexmk-default)
        :init (auctex-latexmk-setup))

      (defun my/make-latexmk-default ()
        "Sets TeX-command-default to LatexMk, to be used in a hook."
        (setq TeX-command-default "LatexMk"))
    #+END_SRC
*** Fonts
    Used for folding.
    #+BEGIN_SRC emacs-lisp
      (if (display-graphic-p)
          (dolist (range '((#x2200 . #x23ff) (#x27c0 . #x27ff) (#x2980 . #x2bff) (#x1d400 . #x1d7ff)))
            (set-fontset-font
             "fontset-default"
             (cons (decode-char 'ucs (car range)) (decode-char 'ucs (cdr range)))
             "STIX")))
    #+END_SRC
*** ebib
    #+BEGIN_SRC emacs-lisp
      (use-package ebib
        :if window-system
        :bind ("C-c b" . ebib)
        :custom
        (ebib-bib-search-dirs (list (expand-file-name "bibtex/bib" (getenv "TEXMFHOME"))))
        (ebib-file-search-dirs (list (expand-file-name "papers" my/nextcloud-dir))))
    #+END_SRC
** julia
   #+BEGIN_SRC emacs-lisp
     (use-package julia-mode
       :if window-system
       :mode "\\.jl\\'")
     (use-package julia-repl
       :if window-system
       :commands julia-repl-mode
       :hook (julia-mode . julia-repl-mode))
   #+END_SRC
** Web
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :if window-system
       :mode ("\\.markdown?\\'" "\\.md?\\'"))
     (use-package sass-mode
       :if window-system
       :mode "\\.scss?\\'")
     (use-package web-mode
       :disabled
       :mode ("\\.\\([tT][tT]\\)\\'" ; template toolkit
              "\\.phtml\\'" "\\.tpl\\.php\\'" "\\.[agj]sp\\'" "\\.as[cp]x\\'"
              "\\.erb\\'" "\\.mustache\\'" "\\.djhtml\\'" "\\.html?\\'" "\\.jsx?\\'" "\\.s?css\\'"))
   #+END_SRC
** Misc
   #+BEGIN_SRC emacs-lisp
     (use-package cperl-mode
       :disabled
       :if window-system
       :mode "\\.\\([pP][Llm]\\|al\\)\\'"
       :interpreter ("perl" "perl5" "miniperl"))
     (use-package rainbow-delimiters
       :ensure t
       :commands rainbow-delimiters-mode
       :hook ((prog-mode LaTeX-mode) . rainbow-delimiters-mode))
   #+END_SRC
* Git
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind ("C-c m" . magit-status)
       :config
       (global-magit-file-mode)
       (setq magit-last-seen-setup-instructions "1.4.0"))
   #+END_SRC
** diff-hl
   #+BEGIN_SRC emacs-lisp
     (use-package diff-hl
       :hook ((magit-post-refresh . diff-hl-magit-post-refresh)
              (dired-mode . diff-hl-dired-mode-unless-remote))
       :init
       (global-diff-hl-mode))
   #+END_SRC
** misc
   #+BEGIN_SRC emacs-lisp
     (use-package gitconfig-mode
       :mode "\\'\\.gitconfig\\'")
     (use-package gitignore-mode
       :mode "\\'\\.gitignore\\'")
   #+END_SRC
